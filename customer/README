fiegn in detail
https://docs.spring.io/spring-cloud-openfeign/docs/current/reference/html/

Q. Differnece between Open Feign and netflix feign.
=> Netflix developed netflix feign.
Spring Cloud Netflix integrates the Netflix OSS offerings into the Spring Cloud ecosystem.
This includes Feign, Eureka, Ribbon, and a host of other tools and utilities.
However, Feign was given its own Spring Cloud Starter to allow access to just Feign.

Ultimately, Netflix decided to stop using Feign internally and ceased its development.
As a result of this decision, Netflix fully transferred (Including development and write access) Feign
    to the open-source community under a new project named OpenFeign.
Luckily, it continues to receive immense support from the open-source community and has seen many new features and updates.




Q. Dependecies and differences?

=> 1. Netflix feign
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-feign</artifactId>
                <versionId>1.4.7.RELEASE</versionID>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>Hoxton.SR8</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

             this feign only works with Spring Boot 1.4.7 or earlier.

      Open Feign
            <!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-openfeign -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-openfeign</artifactId>
                <version>4.1.0</version>
            </dependency>












Service Discovery Client

When a client registers with Eureka, it provides meta-data about itself
such as host, port, health indicator URL, home page, and other details.
Eureka receives heartbeat messages from each instance belonging to a service.
If the heartbeat fails over a configurable timetable, the instance is normally removed from the registry.

Q. @EnableEurekaClient VS @EnableDiscoveryClient?
=> Both the annotations are used to mark/make the service to register with service discovery/eureka server.
    @EnableEurekaClient will initialize the service discovery using eureka server, its like explicitly specifying to use EUREKA
    While @EnableDiscoveryClient will register discovery service using the jar available in classpath like consul, Eureka, Kubernetes.
    i.e. When we are using consul for service discovery. then
    we need to use @EnableDiscoveryClient to register the service to server.




TODO - @EnableDiscoveryClient With Kubernetes.
TODO- Authenticating with the Eureka Server
TODO - Registering a Secure Application https://cloud.spring.io/spring-cloud-netflix/multi/multi__service_discovery_eureka_clients.html

























Spring CLoud Load Balancer
 /-------------------------\                                  /-------------------------------\
|  customer(localhost:8080) |-----------call 1/3/5---------> |    Address instance 1 port-8081 |
 \_________________________/      |                           \_______________________________/
                                  |                            /------------------------------\
                                  |-----call 2/4/6----------->| Address Instance 2 (port-8082) |
                                                               \______________________________/

Typically in MS architecture, When load increased we bring up
more instances of the service.
e.g. due to sudden 1000 users surge. We bought up 20 instances of the address service.
No, we need to balance the request among these 20 service.

We can do that using the load balancer.

They have depricated netflix ribbon load balancer. Now, we should use spring cloud load balancer.